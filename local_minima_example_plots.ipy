# %% imports
%load_ext autoreload
%autoreload 2

import model
import torch
import math
import matplotlib.pyplot as plt
import numpy as np
import time
import pickle

model.logger.setLevel("INFO")

# %% load results

with open('local_minima_example.pkl', 'rb') as f:
    dct = pickle.load(f)

params = torch.tensor(dct['params'], dtype=torch.float64)
contrib_pattern = torch.tensor(dct['contrib_pattern'], dtype=torch.int)
secret_v = torch.tensor(dct['secret_v'], dtype=torch.float64)
initial_guess_v = torch.tensor(dct['initial_guess_v'], dtype=torch.float64)

# %% plot the loss
plt.gcf().set_size_inches(6,2)
niter = len(dct['losses'])

plt.plot(np.r_[0:niter],dct['losses'])
plt.ylabel("NLL")
plt.savefig('local_minima_example_losses.png', dpi=300)
plt.xlabel("Iteration")

plt.tight_layout()
plt.savefig('local_minima_example_losses.png', dpi=300)

# %% convex combs
(alphas,convex_comb_losses) = dct['convex_comb_losses']
plt.gcf().set_size_inches(6,2)
plt.plot(alphas,convex_comb_losses)
plt.ylabel("NLL")
plt.xticks([0,.5,1],['Truth','Equal mixture','Local Optimum'])
plt.grid(True)
plt.tight_layout()
plt.savefig('local_minima_example_convex_comb.png', dpi=300)


# %% plot tail of params

plt.gcf().set_size_inches(6,2)
n_params = len(params)
npp = np.argsort(params.detach().numpy())
npp = npp[npp != 0]
plt.plot(np.r_[1:n_params], params[npp], 'o',label='Local Minimum')
plt.plot(np.r_[1:n_params], secret_v[npp], '+',label='Truth')
plt.plot(np.r_[1:n_params], initial_guess_v[npp], 'x',label='Initial Guess')
plt.gca().set_yscale('log')
plt.xticks([])
plt.xlabel("Parameters (sorted by value at local minimum)")
plt.ylabel("Probability")
plt.legend()
plt.savefig('local_minima_example_parameter_magnitudes.png', dpi=300)
# %%
